From 3f2262921b06647b97a309e8db9f3349c7b1f1f3 Mon Sep 17 00:00:00 2001
From: Sabina Smajlaj <ss3912@columbia.edu>
Date: Sun, 28 Oct 2012 12:12:07 -0400
Subject: [PATCH 1/4] Comitted all files

---
 README.txt                     |    9 ++++++
 part1/Makefile                 |   18 +++++++++++
 part1/mdb-lookup-server-nc-2.c |   68 ++++++++++++++++++++++++++++++++++++++++
 part1/mdb-lookup-server-nc.sh  |    7 +++++
 4 files changed, 102 insertions(+)
 create mode 100644 README.txt
 create mode 100644 part1/Makefile
 create mode 100644 part1/mdb-lookup-server-nc-2.c
 create mode 100755 part1/mdb-lookup-server-nc.sh

diff --git a/README.txt b/README.txt
new file mode 100644
index 0000000..384b7d2
--- /dev/null
+++ b/README.txt
@@ -0,0 +1,9 @@
+Sabina Smajlaj
+ss3912	
+LAb Assignemnt #5
+
+Programs work as they should.
+
+This is a few minutes late just because it has been taking me a long time to submit it. 
+
+Run make all instead of make. 
diff --git a/part1/Makefile b/part1/Makefile
new file mode 100644
index 0000000..b4bc669
--- /dev/null
+++ b/part1/Makefile
@@ -0,0 +1,18 @@
+CC=gcc
+CFLAGS= -Wall -g 
+
+.PHONY: default
+default: mdb-lookup-server-nc-2 mdb-lookup-server-nc-1
+
+mdb-lookup-server-nc-2: 
+
+mdb-lokup-server-nc-1: 
+
+.PHONY: clean
+clean: 
+	rm -f *.o *~
+
+.PHONY: all
+all: clean default
+
+
diff --git a/part1/mdb-lookup-server-nc-2.c b/part1/mdb-lookup-server-nc-2.c
new file mode 100644
index 0000000..435e649
--- /dev/null
+++ b/part1/mdb-lookup-server-nc-2.c
@@ -0,0 +1,68 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/wait.h>
+#include <sys/types.h>
+#include <unistd.h>
+
+static void die(const char *s)
+{
+	perror(s);
+	exit(1);
+}
+int main(int argc, char **argv)
+{
+	if (argc != 2) {
+        fprintf(stderr, "usage: %s <port>\n", argv[0]);
+        exit(1);
+    	}//end if 
+
+	while("\n"){
+		
+		int b; 
+		pid_t thispid; 
+		thispid = waitpid( (pid_t) -1, NULL, WNOHANG); //id of terminated programs 
+		printf("%d", thispid); 
+		
+		int a; 
+
+		printf("Please enter a port number:"); 
+		
+		while("\n"){ // inner while in case user keeping pressing enter 		
+			printf("Please enter a port number:"); 
+			scanf("%d", &a); 
+		}//end inner while loop 
+
+		scanf("%d", &a);
+ 
+		pid_t pid = fork();
+
+		if (pid < 0) {
+		die("fork failed");
+		} 
+		
+		else if (pid == 0) {
+		// child process
+		fprintf(stderr, "[pid=%d] ", (int)getpid());
+		b= (int)getpid(); 
+		fprintf(stderr, "mdb-lookup-server started on port %s\n", argv[1]);
+		execl("./mdb-lookup-server-nc.sh", "mdb-lookup-server-nc.sh", (char *) 0);
+		die("execl failed");
+		} 
+		else {
+		// parent process
+		if (waitpid(pid,
+			    NULL, // no status                    
+			    0) // no options
+			!= pid)
+		    die("waitpid failed");
+		fprintf(stderr, "[pid=%d] ", (int)pid);
+		fprintf(stderr, "mdb-lookup-server terminated\n");
+		} //end if  		
+		
+		printf("An instance of mdb-lookup-server has started on pid and port number: "); 
+		printf("%d %d", b, a); //printing out the pid and port number 
+
+	}//end outer while loop 
+return 0;
+   
+}
diff --git a/part1/mdb-lookup-server-nc.sh b/part1/mdb-lookup-server-nc.sh
new file mode 100755
index 0000000..950d0e5
--- /dev/null
+++ b/part1/mdb-lookup-server-nc.sh
@@ -0,0 +1,7 @@
+#!/bin/sh
+PID=${BASHPID-$$}
+
+mkfifo mypipe
+cat mypipe-$PID | nc -l $1 | /home/jae/cs3157-pub/bin/mdb-lookup-cs3157 > mypipe-$PID 
+
+rm -f mypipe-$PID 
-- 
1.7.9.5


From 7324e574059fdad99736300b3714c489ea7cf8a2 Mon Sep 17 00:00:00 2001
From: Sabina Smajlaj <ss3912@columbia.edu>
Date: Sun, 28 Oct 2012 12:26:34 -0400
Subject: [PATCH 2/4] Committed all files

---
 README.txt |   47 +++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 45 insertions(+), 2 deletions(-)

diff --git a/README.txt b/README.txt
index 384b7d2..cb09888 100644
--- a/README.txt
+++ b/README.txt
@@ -2,8 +2,51 @@ Sabina Smajlaj
 ss3912	
 LAb Assignemnt #5
 
-Programs work as they should.
+Programs work as they should, except for checking for terminated child processes. If I had more time, I would make a loop that counted the number and looped through, printing each until the total number were 0.  
 
-This is a few minutes late just because it has been taking me a long time to submit it. 
+This is a few minutes late just because it has been taking me a long time to submit it due to not knowing I had to clone the lab5 files into my own directory. That took a few extra minutes to do since I did not want it to overwrite my own files. 
 
 Run make all instead of make. 
+
+
+Valgrind output for (b)
+
+==16437== Memcheck, a memory error detector
+==16437== Copyright (C) 2002-2011, and GNU GPL'd, by Julian Seward et al.
+==16437== Using Valgrind-3.7.0 and LibVEX; rerun with -h for copyright info
+==16437== Command: ./mdb-lookup-server-nc-1
+==16437== 
+usage: ./mdb-lookup-server-nc-1 <port>
+==16437== 
+==16437== HEAP SUMMARY:
+==16437==     in use at exit: 0 bytes in 0 blocks
+==16437==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
+==16437== 
+==16437== All heap blocks were freed -- no leaks are possible
+==16437== 
+==16437== For counts of detected and suppressed errors, rerun with: -v
+==16437== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 2 from 2)
+
+
+Valgrind output for (c)
+
+rm -f *.o *~
+gcc -Wall -g     mdb-lookup-server-nc-2.c   -o mdb-lookup-server-nc-2
+gcc -Wall -g     mdb-lookup-server-nc-1.c   -o mdb-lookup-server-nc-1
+ss3912@havana /home/ss3912/cs3157/lab5/part1 $ valgrind --leak-check=yes ./mdb-lookup-server-nc-2
+==16386== Memcheck, a memory error detector
+==16386== Copyright (C) 2002-2011, and GNU GPL'd, by Julian Seward et al.
+==16386== Using Valgrind-3.7.0 and LibVEX; rerun with -h for copyright info
+==16386== Command: ./mdb-lookup-server-nc-2
+==16386== 
+usage: ./mdb-lookup-server-nc-2 <port>
+==16386== 
+==16386== HEAP SUMMARY:
+==16386==     in use at exit: 0 bytes in 0 blocks
+==16386==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
+==16386== 
+==16386== All heap blocks were freed -- no leaks are possible
+==16386== 
+==16386== For counts of detected and suppressed errors, rerun with: -v
+==16386== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 2 from 2)
+
-- 
1.7.9.5


From d6f44e046788863f85212f3cfcb505bd85a5dfc8 Mon Sep 17 00:00:00 2001
From: Sabina Smajlaj <ss3912@columbia.edu>
Date: Sun, 28 Oct 2012 12:48:18 -0400
Subject: [PATCH 3/4] Hopefully final commit

---
 README.txt                     |    2 ++
 part1/mdb-lookup-server-nc-2.c |   38 +++++++++++++-------------------------
 part1/mdb-lookup-server-nc.sh  |    2 +-
 3 files changed, 16 insertions(+), 26 deletions(-)

diff --git a/README.txt b/README.txt
index cb09888..8f4e421 100644
--- a/README.txt
+++ b/README.txt
@@ -6,6 +6,8 @@ Programs work as they should, except for checking for terminated child processes
 
 This is a few minutes late just because it has been taking me a long time to submit it due to not knowing I had to clone the lab5 files into my own directory. That took a few extra minutes to do since I did not want it to overwrite my own files. 
 
+Now this is really late. Turns out I added my old files to lab5, the ones that didn't work. So I had to rewrite all of them. Then I forgot to save that, so I had to rewrite them all once again. I feel idiotic. Please don't penalize me for it... 
+
 Run make all instead of make. 
 
 
diff --git a/part1/mdb-lookup-server-nc-2.c b/part1/mdb-lookup-server-nc-2.c
index 435e649..171bb1d 100644
--- a/part1/mdb-lookup-server-nc-2.c
+++ b/part1/mdb-lookup-server-nc-2.c
@@ -9,12 +9,8 @@ static void die(const char *s)
 	perror(s);
 	exit(1);
 }
-int main(int argc, char **argv)
-{
-	if (argc != 2) {
-        fprintf(stderr, "usage: %s <port>\n", argv[0]);
-        exit(1);
-    	}//end if 
+int main()
+{ 
 
 	while("\n"){
 		
@@ -23,17 +19,16 @@ int main(int argc, char **argv)
 		thispid = waitpid( (pid_t) -1, NULL, WNOHANG); //id of terminated programs 
 		printf("%d", thispid); 
 		
-		int a; 
+		int a=0; 
 
-		printf("Please enter a port number:"); 
-		
-		while("\n"){ // inner while in case user keeping pressing enter 		
+		while(a<=0){ 
 			printf("Please enter a port number:"); 
-			scanf("%d", &a); 
-		}//end inner while loop 
+			char buffer[1000];
+			int c= 1000; 
+			fgets(buffer, c, stdin); 
+			a= atoi(buffer); 
+ 		}//end while 
 
-		scanf("%d", &a);
- 
 		pid_t pid = fork();
 
 		if (pid < 0) {
@@ -45,19 +40,12 @@ int main(int argc, char **argv)
 		fprintf(stderr, "[pid=%d] ", (int)getpid());
 		b= (int)getpid(); 
 		fprintf(stderr, "mdb-lookup-server started on port %s\n", argv[1]);
-		execl("./mdb-lookup-server-nc.sh", "mdb-lookup-server-nc.sh", (char *) 0);
+		char temp[(int) sizeof(int) +1]; 
+		sprintf(temp, "%d", a); 
+		execl("./mdb-lookup-server-nc.sh", "mdb-lookup-server-nc.sh", array, (char *) 0);
 		die("execl failed");
 		} 
-		else {
-		// parent process
-		if (waitpid(pid,
-			    NULL, // no status                    
-			    0) // no options
-			!= pid)
-		    die("waitpid failed");
-		fprintf(stderr, "[pid=%d] ", (int)pid);
-		fprintf(stderr, "mdb-lookup-server terminated\n");
-		} //end if  		
+		
 		
 		printf("An instance of mdb-lookup-server has started on pid and port number: "); 
 		printf("%d %d", b, a); //printing out the pid and port number 
diff --git a/part1/mdb-lookup-server-nc.sh b/part1/mdb-lookup-server-nc.sh
index 950d0e5..05c694b 100755
--- a/part1/mdb-lookup-server-nc.sh
+++ b/part1/mdb-lookup-server-nc.sh
@@ -1,7 +1,7 @@
 #!/bin/sh
 PID=${BASHPID-$$}
 
-mkfifo mypipe
+mkfifo mypipe-$PID
 cat mypipe-$PID | nc -l $1 | /home/jae/cs3157-pub/bin/mdb-lookup-cs3157 > mypipe-$PID 
 
 rm -f mypipe-$PID 
-- 
1.7.9.5


From 961d4d3360b342736a6f67b9ed45879a30207cf0 Mon Sep 17 00:00:00 2001
From: Sabina Smajlaj <ss3912@columbia.edu>
Date: Sun, 28 Oct 2012 12:50:55 -0400
Subject: [PATCH 4/4] Nope, that was not the last one...

---
 part1/mdb-lookup-server-nc-2.c |    6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/part1/mdb-lookup-server-nc-2.c b/part1/mdb-lookup-server-nc-2.c
index 171bb1d..1da0457 100644
--- a/part1/mdb-lookup-server-nc-2.c
+++ b/part1/mdb-lookup-server-nc-2.c
@@ -39,9 +39,9 @@ int main()
 		// child process
 		fprintf(stderr, "[pid=%d] ", (int)getpid());
 		b= (int)getpid(); 
-		fprintf(stderr, "mdb-lookup-server started on port %s\n", argv[1]);
-		char temp[(int) sizeof(int) +1]; 
-		sprintf(temp, "%d", a); 
+		fprintf(stderr, "mdb-lookup-server started on port %d\n", a);
+		char array[(int) sizeof(int) +1]; 
+		sprintf(array, "%d", a); 
 		execl("./mdb-lookup-server-nc.sh", "mdb-lookup-server-nc.sh", array, (char *) 0);
 		die("execl failed");
 		} 
-- 
1.7.9.5

